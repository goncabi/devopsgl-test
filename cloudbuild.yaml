substitutions:
  _REGION: "europe-west1"
  _AR_REPO: "hello-repo"
  _ENV: "dev"
  _SERVICE_NAME: "hello-world"

options:
  logging: CLOUD_LOGGING_ONLY
  substitutionOption: 'ALLOW_LOOSE'

steps:
  # 1. Build & Test Stage
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build with Tests'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}-${_ENV}:${SHORT_SHA}'
      - '.'

  # 2. Push the tested container image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}-${_ENV}:${SHORT_SHA}'

  # 3. Deploy the "Green" (new) version (0% traffic)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy Green'
    entrypoint: gcloud
    args:
      - run
      - deploy
      - '${_SERVICE_NAME}-${_ENV}'
      - '--image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}-${_ENV}:${SHORT_SHA}'
      - '--region=${_REGION}'
      - '--platform=managed'
      - '--allow-unauthenticated'
      - '--no-traffic'

  # 4. Get Green URL
  # a little loop to make sure that the revision isn't empty
  # plus extra delay
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Get Green URL'
    entrypoint: bash
    args:
      - -c
      - |
        echo "Looking for revision of service ${_SERVICE_NAME}-${_ENV}..."

        _GREEN_REV=""
        # Try up to 10 times (with 5s delay) to find a revision
        for i in {1..10}; do
          # First try to get the latest *ready* revision
          _GREEN_REV=$(gcloud run services describe ${_SERVICE_NAME}-${_ENV} \
            --region=${_REGION} \
            --format="value(status.latestReadyRevisionName)")

          # If no ready revision is found, fall back to the latest *created* one
          if [ -z "$_GREEN_REV" ]; then
            _GREEN_REV=$(gcloud run services describe ${_SERVICE_NAME}-${_ENV} \
              --region=${_REGION} \
              --format="value(status.latestCreatedRevisionName)")
          fi

          # Stop the loop if we found a revision
          if [ -n "$_GREEN_REV" ]; then
            echo "Found revision: $_GREEN_REV"
            break
          fi

          # Wait before retrying
          echo "No revision found yet, waiting 5s..."
          sleep 5
        done

        # Fail if no revision could be found after all retries
        if [ -z "$_GREEN_REV" ]; then
          echo "ERROR: No revision found after 10 attempts!"
          exit 1
        fi

        echo "Waiting for revision $_GREEN_REV to become ready..."
        # Check if the revision is ready (up to 10 attempts with 5s delay)
        for i in {1..10}; do
          _IS_READY=$(gcloud run revisions describe "$_GREEN_REV" --region=${_REGION} \
            --format="value(status.conditions[?type=Ready].status)")
          if [ "$_IS_READY" = "True" ]; then
            echo "Revision is ready."
            break
          fi
          echo "Revision not ready yet, waiting 5s..."
          sleep 5
        done

        # Finally, fetch the public URL of the ready revision
        gcloud run revisions describe "$_GREEN_REV" --region=${_REGION} \
          --format="value(status.url)" > green_url.txt
        echo "Green URL: $(cat green_url.txt)"
  
  

  # 5. Smoke Test (HTTP 200)
  - name: 'curlimages/curl'
    id: 'Smoke Test'
    entrypoint: /bin/sh
    args:
      - -c
      - |
        _URL=$(cat green_url.txt)
        echo "Smoke testing $_URL"
        curl --fail --silent --show-error "$_URL" || (echo "Smoke test failed"; exit 1)

  # 6. Integration Test (Body pr√ºfen)
  - name: 'node:18'
    id: 'Integration Tests'
    entrypoint: bash
    args:
      - -c
      - |
        _URL=$(cat green_url.txt)
        npm ci
        node tests/integration/check_remote.js "$_URL"

  # 7. Shift Traffic (nur wenn Tests bestanden)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Shift Traffic'
    entrypoint: gcloud
    args:
      - run
      - services
      - update-traffic
      - '${_SERVICE_NAME}-${_ENV}'
      - '--region=${_REGION}'
      - '--to-latest'

images:
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}-${_ENV}:${SHORT_SHA}'
