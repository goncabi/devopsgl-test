substitutions:
  _REGION: "europe-west1"
  _AR_REPO: "hello-repo"
  _ENV: "dev"
  _SERVICE_NAME: "hello-world"

options:
  logging: CLOUD_LOGGING_ONLY
  substitutionOption: 'ALLOW_LOOSE'

steps:
  # 1. Build & Test Stage
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build with Tests'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}-${_ENV}:${SHORT_SHA}'
      - '.'

  # 2. Push the tested container image to Artifact Registry (with retry)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push'
    entrypoint: bash
    args:
      - -c
      - |
        _IMAGE="${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}-${_ENV}:${SHORT_SHA}"
        _MAX_RETRIES=5
        _RETRY_DELAY=10

        for i in $(seq 1 $_MAX_RETRIES); do
          echo "Pushing image (attempt $i/$_MAX_RETRIES): $_IMAGE"
          docker push "$_IMAGE" && break

          echo "Push failed, retrying in ${_RETRY_DELAY}s..."
          sleep $_RETRY_DELAY

          if [ $i -eq $_MAX_RETRIES ]; then
            echo "ERROR: Docker push failed after $_MAX_RETRIES attempts."
            exit 1
          fi
        done


  # 3. Deploy the "Green" version and wait until the revision is ready
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy Green'
    entrypoint: bash
    args:
      - -c
      - |
        echo "Deploying service ${_SERVICE_NAME}-${_ENV}..."

        # Run deploy
        gcloud run deploy ${_SERVICE_NAME}-${_ENV} \
          --image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}-${_ENV}:${SHORT_SHA} \
          --region=${_REGION} \
          --platform=managed \
          --allow-unauthenticated \
          --no-traffic

        # Wait for the latestReadyRevisionName to be set (Set wait parameters)
        _MAX_WAIT=60  # total wait time in seconds
        _INTERVAL=5   # check interval in seconds
        
        # Debug output to verify variable values
        echo "_MAX_WAIT=$_MAX_WAIT"
        echo "_INTERVAL=$_INTERVAL"

        # Compute retries
        _RETRIES=$((_MAX_WAIT / _INTERVAL))
        echo "_RETRIES=$_RETRIES"

        _GREEN_REV=""
        for i in $(seq 1 $_RETRIES); do
          _GREEN_REV=$(gcloud run services describe ${_SERVICE_NAME}-${_ENV} \
            --region=${_REGION} \
            --platform=managed \
            --format="value(status.latestReadyRevisionName)")

          if [ -n "$_GREEN_REV" ]; then
            echo "Revision is ready: $_GREEN_REV"
            break
          fi

          echo "Waiting for revision to become ready... attempt $i/$_RETRIES"
          sleep $_INTERVAL
        done

        if [ -z "$_GREEN_REV" ]; then
          echo "ERROR: no revision found after waiting $_MAX_WAIT seconds"
          exit 1
        fi

        # Save revision for later steps
        echo "$_GREEN_REV" > green_rev.txt

 # 4. Get Green URL (from extracted revision)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Get Green URL'
    entrypoint: bash
    args:
          - -c
          - |
            _GREEN_REV=$(cat green_rev.txt)
            echo "Using revision $_GREEN_REV"
            gcloud run revisions describe "$_GREEN_REV" --region=${_REGION} \
              --format="value(status.url)" > green_url.txt
            echo "Green URL: $(cat green_url.txt)"
  

  # 5. Smoke Test (HTTP 200)
  - name: 'curlimages/curl'
    id: 'Smoke Test'
    entrypoint: /bin/sh
    args:
      - -c
      - |
        _URL=$(cat green_url.txt)
        echo "Smoke testing $_URL"
        curl --fail --silent --show-error "$_URL" || (echo "Smoke test failed"; exit 1)

  # 6. Integration Test (Body pr√ºfen)
  - name: 'node:18'
    id: 'Integration Tests'
    entrypoint: bash
    args:
      - -c
      - |
        _URL=$(cat green_url.txt)
        npm ci
        node tests/integration/check_remote.js "$_URL"

  # 7. Shift Traffic (nur wenn Tests bestanden)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Shift Traffic'
    entrypoint: gcloud
    args:
      - run
      - services
      - update-traffic
      - '${_SERVICE_NAME}-${_ENV}'
      - '--region=${_REGION}'
      - '--to-latest'

images:
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}-${_ENV}:${SHORT_SHA}'
