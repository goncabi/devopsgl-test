substitutions:
  _REGION: "europe-west1"
  _AR_REPO: "hello-repo"
  _ENV: "dev"
  _SERVICE_NAME: "hello-world"

options:
  logging: CLOUD_LOGGING_ONLY
  substitutionOption: 'ALLOW_LOOSE'

steps:
  # 1. Build & Test Stage (Docker Image)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build with Tests'
    args:
      - 'build'
      - '-t'
      - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}-${_ENV}:${SHORT_SHA}'
      - '.'

  # 2. Push the tested container image to Artifact Registry (with retry)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push'
    entrypoint: bash
    args:
        - -c
        - |
          IMAGE="${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}-${_ENV}:${SHORT_SHA}"
          MAX_RETRIES=5
          RETRY_DELAY=5

          for i in $(seq 1 $MAX_RETRIES); do
            echo "Pushing Docker image (attempt $i/$MAX_RETRIES)..."
            if docker push "$IMAGE"; then
              echo "Push successful"
              break
            else
              echo "Push failed, retrying in $RETRY_DELAY seconds..."
              sleep $RETRY_DELAY
            fi

            if [ "$i" -eq "$MAX_RETRIES" ]; then
            echo "ERROR: Docker push failed after $MAX_RETRIES attempts"
            exit 1
          fi
          done


  # 3. Deploy the "Green" version and wait until the revision is ready
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy Green'
    entrypoint: bash
    args:
      - -c
      - |
        set -e
        
        echo "Deploying service ${_SERVICE_NAME}-${_ENV}..."

        # Run deploy
        gcloud run deploy ${_SERVICE_NAME}-${_ENV} \
          --image=${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}-${_ENV}:${SHORT_SHA} \
          --region=${_REGION} \
          --platform=managed \
          --allow-unauthenticated \
          --no-traffic

        # Wait for ready revision
        MAX_WAIT=180
        INTERVAL=5
        RETRIES=$((MAX_WAIT / INTERVAL))
        
        echo "Waiting up to $MAX_WAIT seconds for revision to become ready..."

        GREEN_REV=""
        for i in $(seq 1 $RETRIES); do
          GREEN_REV=$(gcloud run services describe ${_SERVICE_NAME}-${_ENV} \
            --region=${_REGION} \
            --platform=managed \
            --format="value(status.latestReadyRevisionName)")

          if [ -n "$GREEN_REV" ]; then
            echo "Revision is ready: $GREEN_REV"
            break
          fi

          echo "Waiting for revision to become ready... attempt $i/$RETRIES"
          sleep $INTERVAL
        done

        if [ -z "$GREEN_REV" ]; then
          echo "ERROR: no revision found after waiting $MAX_WAIT seconds"
          exit 1
        fi

        # Save revision for later steps
        echo "$GREEN_REV" > green_rev.txt

  # 4. Get Green URL (from extracted revision)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Get Green URL'
    entrypoint: bash
    args:
        - -c
        - |
          GREEN_REV=$(cat green_rev.txt)
          URL=$(gcloud run revisions describe "$GREEN_REV" --region=${_REGION} --format="value(status.url)")
          echo "$URL" > green_url.txt
          echo "Green URL: $URL"
  

  # 5. Smoke Test (HTTP 200)
  - name: 'curlimages/curl'
    id: 'Smoke Test'
    entrypoint: /bin/sh
    args:
      - -c
      - |
        _URL=$(cat green_url.txt)
        echo "Smoke testing $_URL"
        # curl --fail --silent --show-error "$_URL" || (echo "Smoke test failed"; exit 1)
        if ! curl --fail --silent --show-error "$_URL"; then
        echo "Smoke test failed"
        exit 1
        fi

  # 6. Integration Test (Body pr√ºfen)
  - name: 'node:18'
    id: 'Integration Tests'
    entrypoint: bash
    args:
      - -c
      - |
        _URL=$(cat green_url.txt)
        npm ci
        node tests/integration/check_remote.js "$_URL"

  # 7. Shift Traffic (nur wenn Tests bestanden)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Shift Traffic'
    entrypoint: gcloud
    args:
      - run
      - services
      - update-traffic
      - '${_SERVICE_NAME}-${_ENV}'
      - '--region=${_REGION}'
      - '--to-latest'

images:
  - '${_REGION}-docker.pkg.dev/$PROJECT_ID/${_AR_REPO}/${_SERVICE_NAME}-${_ENV}:${SHORT_SHA}'
